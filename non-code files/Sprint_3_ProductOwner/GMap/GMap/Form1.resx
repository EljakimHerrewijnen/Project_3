<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>